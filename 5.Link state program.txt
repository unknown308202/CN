import sys

class Network:
    def __init__(self, vertices):
        self.V = vertices
        self.graph = [[0 for column in range(vertices)] for row in range(vertices)]

    def print_solution(self, dist, src):
        print(f"Shortest path from node {src} to other nodes:")
        for node in range(self.V):
            print(f"Node {node} is at distance {dist[node]}")

    def min_distance(self, dist, spt_set):
        min = sys.maxsize
        min_index = -1

        for v in range(self.V):
            if dist[v] < min and spt_set[v] == False:
                min = dist[v]
                min_index = v

        return min_index

    def dijkstra(self, src):
        dist = [sys.maxsize] * self.V
        dist[src] = 0
        spt_set = [False] * self.V

        for _ in range(self.V):
            u = self.min_distance(dist, spt_set)
            spt_set[u] = True

            for v in range(self.V):
                if self.graph[u][v] > 0 and spt_set[v] == False and dist[v] > dist[u] + self.graph[u][v]:
                    dist[v] = dist[u] + self.graph[u][v]

        self.print_solution(dist, src)

# Define the number of nodes in the network
network = Network(5)

# Define the network topology as a graph (adjacency matrix)
network.graph = [[0, 2, 0, 1, 0],
                 [2, 0, 3, 0, 0],
                 [0, 3, 0, 7, 1],
                 [1, 0, 7, 0, 5],
                 [0, 0, 1, 5, 0]]

# Source node to start the path finding
source = 0
network.dijkstra(source)
