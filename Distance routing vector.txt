#include <iostream>
using namespace std;

#define INF 999 // Define a large value as infinity to indicate no connection

// Number of nodes in the graph
#define N 4

// Function to implement Distance Vector Routing algorithm
void distanceVectorRouting(int costMatrix[N][N]) {
    // Create tables to store distances and next hops
    int dist[N][N], next[N][N];

    // Initialize tables
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            // Initially, the distance is the cost provided by the cost matrix
            dist[i][j] = costMatrix[i][j];

            // If i and j are directly connected, next hop is j, otherwise set it to -1
            if (costMatrix[i][j] != INF && i != j)
                next[i][j] = j;
            else
                next[i][j] = -1;
        }
    }

    // Update the tables using the Distance Vector algorithm
    for (int k = 0; k < N; k++) {
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                // Check if a shorter path exists through k
                if (dist[i][j] > dist[i][k] + dist[k][j]) {
                    dist[i][j] = dist[i][k] + dist[k][j];
                    next[i][j] = next[i][k]; // Update next hop
                }
            }
        }
    }

    // Print the final distance and next hop tables
    cout << "\nDistance Table:\n";
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            if (dist[i][j] == INF)
                cout << "INF\t";
            else
                cout << dist[i][j] << "\t";
        }
        cout << endl;
    }

    cout << "\nNext Hop Table:\n";
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            cout << next[i][j] << "\t";
        }
        cout << endl;
    }
}

// Main function
int main() {
    // Define the cost matrix (graph) with distances between nodes
    int costMatrix[N][N] = {
        {0, 2, INF, 1},
        {2, 0, 3, INF},
        {INF, 3, 0, 1},
        {1, INF, 1, 0}
    };

    // Call the function to perform Distance Vector Routing
    distanceVectorRouting(costMatrix);

    return 0;
}
